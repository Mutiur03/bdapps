generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int     @id @default(autoincrement())
  phone            String  @unique
  password         String
  name             String?
  profile_picture  String?
  university       String?
  department       String?
  year_of_study    String?
  graduation_year  String?
  cgpa             Float?
  student_id       String?
  student_id_front String?
  student_id_back  String?
  nid_front        String?
  nid_back         String?
  university_email String? @unique
  date_of_birth    String?
  address          String?
  bio              String?
  skills           String?
  interests        String?
  social_links     Json?
  career_goals     String?
  role             String  @default("user")
  isActivated      Boolean @default(false)
  isVerified       Boolean @default(false)

  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Investor {
  id                  Int          @id @default(autoincrement())
  email               String?      @unique
  phone               String?      @unique
  password            String
  name                String?
  profile_picture     String?
  company_name        String?
  company_website     String?
  company_description String?
  role                String       @default("investor")
  isActivated         Boolean      @default(true)
  projects            Project[]
  investments         Investment[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Project {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  category        String
  budget          Float
  raised_amount   Float?
  userId          Int
  investorId      Int?
  profile_picture String?
  cover_image     String?
  pitch_video     String?
  documents       String[]
  location        String?
  start_date      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  investor    Investor?    @relation(fields: [investorId], references: [id])
  investments Investment[]
  milestones  Milestone[]
}

model Investment {
  id         Int      @id @default(autoincrement())
  amount     Float
  projectId  Int
  investorId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  project  Project  @relation(fields: [projectId], references: [id])
  investor Investor @relation(fields: [investorId], references: [id])
}

model Milestone {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  amount      Float
  status      String   @default("pending")
  projectId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
}
