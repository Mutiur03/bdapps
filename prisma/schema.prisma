generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int     @id @default(autoincrement())
  phone            String  @unique
  password         String
  name             String?
  profile_picture  String?
  university       String?
  department       String?
  year_of_study    String?
  graduation_year  String?
  cgpa             Float?
  student_id       String?
  student_id_front String?
  student_id_back  String?
  nid_front        String?
  nid_back         String?
  university_email String? @unique
  date_of_birth    String?
  address          String?
  bio              String?
  skills           String?
  interests        String?
  social_links     Json?
  career_goals     String?
  role             String  @default("user")
  isActivated      Boolean @default(false)
  isVerified       Boolean @default(false)

  projectMembers ProjectMember[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Project          Project[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Investor {
  id                  Int               @id @default(autoincrement())
  email               String?           @unique
  phone               String?           @unique
  password            String
  name                String?
  profile_picture     String?
  company_name        String?
  company_website     String?
  company_description String?
  location            String?
  bio                 String?
  role                String            @default("investor")
  experienceYears     String?
  investmentFocus     String[]          @default([])
  minInvestment       Int?
  maxInvestment       Int?
  preferredStages     String[]          @default([])
  customSocials       Json?             @default("{\"links\":[]}")
  isActivated         Boolean           @default(true)
  projectInvestors    ProjectInvestor[]
  investments         Investment[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  sentMessages        Message[]         @relation("SentMessagesInvestor")
  receivedMessages    Message[]         @relation("ReceivedMessagesInvestor")
  Project             Project[]
}

model Project {
  id              Int      @id @default(autoincrement())
  userId          Int
  title           String
  description     String
  category        String
  budget          Float
  raised_amount   Float?
  status          String   @default("draft")
  profile_picture String?
  cover_image     String?
  pitch_video     String?
  tags            String?
  location        String?
  start_date      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  invesrorId      Int?

  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  investor         Investor?         @relation(fields: [invesrorId], references: [id], onDelete: Cascade)
  projectMembers   ProjectMember[]
  projectInvestors ProjectInvestor[]
  investments      Investment[]
  milestones       Milestone[]
  documents        Documents[]
  message          Message[]
}

model ProjectMember {
  id        Int      @id @default(autoincrement())
  projectId Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model ProjectInvestor {
  id         Int      @id @default(autoincrement())
  projectId  Int
  investorId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  investor Investor @relation(fields: [investorId], references: [id])

  @@unique([projectId, investorId])
}

model Investment {
  id         Int      @id @default(autoincrement())
  amount     Float
  projectId  Int
  investorId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  investor Investor @relation(fields: [investorId], references: [id])
}

model Milestone {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  amount        Float
  status        String   @default("planned")
  projectId     Int
  completedAt   String?
  deadlineAt    String?
  progress      Int?
  raised_amount Float?
  plannedAt     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Documents {
  id        Int      @id @default(autoincrement())
  projectId Int
  document  String
  size      Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderType       MessageRole
  senderUserId     Int?
  senderInvestorId Int?

  receiverType       MessageRole
  receiverUserId     Int?
  receiverInvestorId Int?

  senderUser   User? @relation("SentMessages", fields: [senderUserId], references: [id])
  receiverUser User? @relation("ReceivedMessages", fields: [receiverUserId], references: [id])

  senderInvestor   Investor? @relation("SentMessagesInvestor", fields: [senderInvestorId], references: [id])
  receiverInvestor Investor? @relation("ReceivedMessagesInvestor", fields: [receiverInvestorId], references: [id])

  project Project @relation(fields: [projectId], references: [id])
}

enum MessageRole {
  user
  investor
}
