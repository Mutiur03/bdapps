generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int     @id @default(autoincrement())
  phone            String  @unique
  password         String
  name             String?
  profile_picture  String?
  university       String?
  department       String?
  year_of_study    String?
  graduation_year  String?
  cgpa             Float?
  student_id       String?
  student_id_front String?
  student_id_back  String?
  nid_front        String?
  nid_back         String?
  university_email String? @unique
  date_of_birth    String?
  address          String?
  bio              String?
  skills           String?
  interests        String?
  social_links     Json?
  career_goals     String?
  role             String  @default("user")
  isActivated      Boolean @default(false)
  isVerified       Boolean @default(false)

  projectMembers ProjectMember[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Project          Project[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Investor {
  id                  Int          @id @default(autoincrement())
  email               String?      @unique
  phone               String?      @unique
  password            String
  name                String?
  profile_picture     String?
  company_name        String?
  company_website     String?
  company_description String?
  company_role        String?
  location            String?
  bio                 String?
  role                String       @default("investor")
  experienceYears     String?
  investmentFocus     String[]     @default([])
  minInvestment       Int?
  maxInvestment       Int?
  preferredStages     String[]     @default([])
  customSocials       Json?        @default("{\"links\":[]}")
  isActivated         Boolean      @default(true)
  investments         Investment[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Project {
  id              Int      @id @default(autoincrement())
  userId          Int
  title           String
  description     String
  budget          Float
  raised_amount   Float?
  status          String   @default("draft")
  profile_picture String?
  cover_image     String?
  pitch_video     String?
  tags            String?
  location        String?
  start_date      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  adminId         Int?

  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectMembers   ProjectMember[]
  projectInvestors ProjectInvestor[]
  milestones       Milestone[]
  documents        Documents[]
  message          Message[]
  admin            Admin?            @relation(fields: [adminId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  category         Category?         @relation(fields: [categoryId], references: [id])
  categoryId       Int?
}

model ProjectMember {
  id        Int      @id @default(autoincrement())
  projectId Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model ProjectInvestor {
  id         Int      @id @default(autoincrement())
  projectId  Int
  investorId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, investorId])
}

model Investment {
  id         Int      @id @default(autoincrement())
  amount     Float
  investorId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  investor Investor  @relation(fields: [investorId], references: [id])
}

model Milestone {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  amount        Float
  status        String   @default("planned")
  projectId     Int
  completedAt   String?
  deadlineAt    String?
  progress      Int?
  raised_amount Float?
  plannedAt     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Documents {
  id        Int      @id @default(autoincrement())
  projectId Int
  document  String
  size      Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  projectId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isRead    Boolean  @default(false)

  senderType    MessageRole
  senderUserId  Int?
  senderAdminId Int?

  receiverType    MessageRole
  receiverUserId  Int?
  receiverAdminId Int?

  senderUser   User? @relation("SentMessages", fields: [senderUserId], references: [id], onDelete: SetNull)
  receiverUser User? @relation("ReceivedMessages", fields: [receiverUserId], references: [id], onDelete: SetNull)

  senderAdmin   Admin? @relation("SentMessagesAdmin", fields: [senderAdminId], references: [id], onDelete: SetNull)
  receiverAdmin Admin? @relation("ReceivedMessagesAdmin", fields: [receiverAdminId], references: [id], onDelete: SetNull)

  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
}

enum MessageRole {
  user
  admin
}

model Admin {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  password         String
  name             String?
  phone            String?
  location         String?
  bio              String?
  profile_picture  String?
  company          String?
  companyRole      String?
  experienceYears  String?
  customSocials    Json?     @default("[]")
  role             String    @default("admin")
  permissions      String[]  @default([])
  isSuperAdmin     Boolean   @default(false)
  lastLogin        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  released_amount  Int?      @default(0)
  sentMessages     Message[] @relation("SentMessagesAdmin")
  receivedMessages Message[] @relation("ReceivedMessagesAdmin")
  Project          Project[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects   Project[]
}

model Fund {
  id        Int      @id @default(autoincrement())
  name      String?  @unique
  amount    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
